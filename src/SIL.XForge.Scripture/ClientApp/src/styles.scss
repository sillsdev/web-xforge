@use 'sass:map';
@use 'variables';

// This creates css variables for common breakpoints (needed when using MediaBreakpointService with BreakpointObserver)
@use 'src/xforge-common/media-breakpoints/css-vars';
@use 'src/breakpoints';

@import 'fonts';
@import 'text';

// Reset all elements to border-box
html {
  box-sizing: border-box;
  -ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

body {
  margin: 0;
  font-family: Roboto, sans-serif;
}

as-split.is-disabled > .as-split-gutter .as-split-gutter-icon {
  background-image: none !important;
}

.flex-column {
  display: flex;
  flex-direction: column;
}

.flex-row {
  display: flex;
  flex-direction: row;
  column-gap: 8px;
  flex-wrap: wrap;
}

.flex-max {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.cdk-overlay-pane.inviteDialogComponent {
  width: 80%;
  max-width: 400px !important;
}

.cdk-overlay-pane.inviteDialogComponent > .mat-mdc-dialog-container {
  padding-top: 5px !important;
}

.mdc-snackbar.snackbar-error {
  --mdc-snackbar-container-color: #{variables.$errorColor};
}

.mdc-button.mat-mdc-unelevated-button,
.mdc-button.mat-button-toggle-button {
  transition:
    color 0.15s,
    background-color 0.15s;

  &:not(:disabled):hover {
    background-color: variables.$greenLight;
    color: variables.$sf_grey;
  }
}

.mat-mdc-icon-button.mat-mdc-button-base.mdc-icon-button {
  transition: color 0.15s;

  &:not([disabled]):hover {
    color: variables.$greenLight;
  }
}

.mat-step-icon.mat-step-icon-selected {
  --mat-stepper-header-selected-state-icon-background-color: #{variables.$greenLight};
  --mat-stepper-header-selected-state-icon-foreground-color: #{variables.$sf_grey};
}

.offline-text {
  color: variables.$errorColor;
}

.locale-fonts mat-option {
  font-family: variables.$languageFonts;
}

// Titles with icons need extra padding above the text
.mat-mdc-dialog-title.dialog-icon-title {
  padding-top: 20px;
  &:before {
    display: none;
  }
}

.mat-mdc-checkbox {
  --mdc-checkbox-unselected-focus-state-layer-opacity: 0.08;
}

// Make checkbox labels inherit parent element's font-weight e.g. if within a table heading
.mat-mdc-checkbox .mdc-form-field {
  font-weight: inherit !important;
}

.mat-progress-bar--closed {
  opacity: 0;
  animation: none;
}

body[dir='rtl'] .mirror-rtl {
  transform: scaleX(-1);
  .mat-badge-content {
    transform: scaleX(-1);
  }
}

// These breakpoints can be somewhat confusing, because a breakpoint can be thought of as a range, or as a specific
// width. If they're fixed numbers, hide-lt-md and hide-gt-md would be mutually exclusive, but if you think of them as
// ranges, you would need to use hide-lt-md and hide-gt-sm to make two elements mutually exclusive. For the purposes of
// these classes, all breakpoints are fixed points, not a range of widths.
// One of the consequences of this is that there is no such thing as gt-xs, since extra small is defined as anything
// less than small. The same is not true of xl; xl has an actual value, and a screen can be larger than xl.

.hide-lt-sm {
  @include breakpoints.media-breakpoint-down(xs) {
    display: none !important;
  }
}

.hide-lt-md {
  @include breakpoints.media-breakpoint-down(sm) {
    display: none !important;
  }
}

.hide-lt-lg {
  @include breakpoints.media-breakpoint-down(md) {
    display: none !important;
  }
}

.hide-lt-xl {
  @include breakpoints.media-breakpoint-down(lg) {
    display: none !important;
  }
}

.hide-gt-sm {
  @include breakpoints.media-breakpoint-up(sm) {
    display: none !important;
  }
}

.hide-gt-md {
  @include breakpoints.media-breakpoint-up(md) {
    display: none !important;
  }
}

.hide-gt-lg {
  @include breakpoints.media-breakpoint-up(lg) {
    display: none !important;
  }
}

.hide-gt-xl {
  @include breakpoints.media-breakpoint-up(xl) {
    display: none !important;
  }
}
