name: E2E Tests
permissions: {}

on:
  merge_group:
  workflow_dispatch:
  schedule:
    # Run an hour before release-qa.yml
    # For now this is just to determine how reliable this workflow is.
    - cron: "30 0 * * 0-1,3-6"
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  e2e_tests:
    name: "Run E2E tests"
    environment: "e2e_tests"
    strategy:
      matrix:
        os: ["ubuntu-22.04"]
        dotnet_version: ["8.0.x"]
        node_version: ["22.13.0"]
        npm_version: ["10.9.2"]
    if: |
      github.event_name != 'pull_request' ||
      contains(github.event.pull_request.labels.*.name, 'e2e') ||
      (github.event.action == 'labeled' && github.event.label.name == 'e2e')
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Deps: .NET"
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{matrix.dotnet_version}}

      - name: "Deps: Node"
        uses: actions/setup-node@v5
        with:
          node-version: ${{matrix.node_version}}

      - name: "Deps: npm"
        env:
          NPM_VERSION: ${{matrix.npm_version}}
        run: |
          set -xueo pipefail
          npm install --global npm@${NPM_VERSION}

      - name: Pre-build report
        run: |
          set -xueo pipefail
          lsb_release -a
          which dotnet
          dotnet --version
          dpkg -l dotnet\*
          dotnet --list-sdks
          dotnet --list-runtimes
          which node
          node --version
          which npm
          npm --version

      - name: "Ensure desired tool versions"
        # The build machine may come with newer tools than we are ready for.
        env:
          NODE_VERSION: ${{matrix.node_version}}
          NPM_VERSION: ${{matrix.npm_version}}
        run: |
          set -xueo pipefail
          [[ $(node --version) == v${NODE_VERSION} ]]
          [[ $(npm --version) == ${NPM_VERSION} ]]

      - name: "Deps: RealtimeServer npm"
        run: cd src/RealtimeServer && (npm ci || (sleep 3m && npm ci))

      - name: "Deps: Backend nuget"
        run: dotnet restore

      - name: "Deps: Frontend npm"
        run: cd src/SIL.XForge.Scripture/ClientApp && (npm ci || (sleep 3m && npm ci))

      - name: "Build: RealtimeServer"
        run: cd src/RealtimeServer && npm run build

      - name: "Build: dotnet Backend"
        run: dotnet build xForge.sln

      - name: "Investigate"
        run: |
          set -xueo pipefail
          pwd
          find -type f | sort | xargs md5sum > out.txt
          wc -l out.txt
          cat out.txt

      - name: "Build: Frontend"
        run: cd src/SIL.XForge.Scripture/ClientApp && npm run build && find dist

      - name: Set up Deno
        uses: denoland/setup-deno@909cc5acb0fdd60627fb858598759246509fa755 # v2.0.2
        with:
          deno-version: v2.x

      - name: Playwright install browsers and package dependencies
        run: |
          set -xueo pipefail
          cd src/SIL.XForge.Scripture/ClientApp/e2e
          sudo npx playwright install-deps
          npx playwright install

      - name: "Deps: Running SF"
        run: |
          set -xueo pipefail

          # Helper method to avoid failing from a network hiccup during provision
          function tryharderto() {
            i=0
            until "$@"; do
              ((++i <= 3))
              echo >&2 "Retrying ${i}"
              sleep 2m
            done
          }

          tryharderto sudo add-apt-repository --yes --update ppa:ansible/ansible
          tryharderto sudo apt-get install --assume-yes ansible
          cd deploy
          ansible-playbook dev-server.playbook.yml --limit localhost --diff

      - name: "Configure secrets"
        env:
          PARATEXT_CLIENT_ID: ${{ secrets.PARATEXT_CLIENT_ID }}
          PARATEXT_CLIENT_SECRET: ${{ secrets.PARATEXT_CLIENT_SECRET }}
          AUTH0_BACKEND_CLIENT_SECRET: ${{ secrets.AUTH0_BACKEND_CLIENT_SECRET }}
          PARATEXT_RESOURCE_PASSWORD_HASH: ${{ secrets.PARATEXT_RESOURCE_PASSWORD_HASH }}
          PARATEXT_RESOURCE_PASSWORD_BASE64: ${{ secrets.PARATEXT_RESOURCE_PASSWORD_BASE64 }}
          SERVAL_CLIENT_ID: ${{ secrets.SERVAL_CLIENT_ID }}
          SERVAL_CLIENT_SECRET: ${{ secrets.SERVAL_CLIENT_SECRET }}
          E2E_SECRETS_JSON_BASE64: ${{ secrets.E2E_SECRETS_JSON_BASE64 }}
        run: |
          set -xueo pipefail
          cd src/SIL.XForge.Scripture/
          dotnet user-secrets set "Paratext:ClientId" "${PARATEXT_CLIENT_ID}"
          dotnet user-secrets set "Paratext:ClientSecret" "${PARATEXT_CLIENT_SECRET}"
          dotnet user-secrets set "Auth:BackendClientSecret" "${AUTH0_BACKEND_CLIENT_SECRET}"
          dotnet user-secrets set "Paratext:ResourcePasswordHash" "${PARATEXT_RESOURCE_PASSWORD_HASH}"
          dotnet user-secrets set "Paratext:ResourcePasswordBase64" "${PARATEXT_RESOURCE_PASSWORD_BASE64}"
          dotnet user-secrets set "Serval:ClientId" "${SERVAL_CLIENT_ID}"
          dotnet user-secrets set "Serval:ClientSecret" "${SERVAL_CLIENT_SECRET}"
          base64 --decode - <<< "${E2E_SECRETS_JSON_BASE64}" > ./ClientApp/e2e/secrets.json

      - name: Check for cache problems
        run: |
          set -xueo pipefail
          pwd
          find -name \*OPHL7TCV\*
          grep -RHn OPHL7TCV

      - name: Run E2E tests
        env:
          HG_PATH: /usr/bin/hg
        run: ./src/SIL.XForge.Scripture/ClientApp/e2e/pre_merge_ci.sh

      - name: Publish test results
        uses: actions/upload-artifact@v4
        # Run this step even if the job fails.
        if: always()
        with:
          name: e2e-test-results
          path: |
            ./src/SIL.XForge.Scripture/ClientApp/e2e/test_output/ci_e2e_test_results/*.zip
            ./src/SIL.XForge.Scripture/ClientApp/e2e/test_output/ci_e2e_test_results/*.txt
          # Don't fail if no files are found
          if-no-files-found: ignore
