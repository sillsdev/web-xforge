<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutCheckingTool" xml:space="preserve">
    <value>The Community Checking tool facilitates a Scripture checking campaign, portion-by-portion, with the aim of getting broader feedback to the translation committee quickly.</value>
  </data>
  <data name="AboutEngaging" xml:space="preserve">
    <value>Many Scripture projects today are engaging an increasingly geographically diverse group of heart-language speakers.</value>
  </data>
  <data name="AboutFlexible" xml:space="preserve">
    <value>Flexible</value>
  </data>
  <data name="AboutFlexibleDescription" xml:space="preserve">
    <value>2 There's no predefined set of questions that you have to use. {0}Compile questions that fit your context{1}.</value>
  </data>
  <data name="AboutHeader" xml:space="preserve">
    <value>About Scripture Forge</value>
  </data>
  <data name="AboutParatext" xml:space="preserve">
    <value>Works with Paratext</value>
  </data>
  <data name="AboutParatextDescription" xml:space="preserve">
    <value>1 Simply {0}connect your Paratext project{1} to get started. {0}Synchronize{1} your project to keep it up-to-date with Paratext and send users responses back in Paratext Notes.</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>Extend your Reach With Scripture Checking</value>
  </data>
  <data name="AboutUserEngagement" xml:space="preserve">
    <value>User Engagement</value>
  </data>
  <data name="AboutUserEngagementDescription" xml:space="preserve">
    <value>3 Turn on {0}"Share"{1} to enable users to invite a friend to join your campaign or keep feedback to a defined group. Users can answer questions, comment on other's answers and like other's responses.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>ꤔꤟꤢꤧ꤬ ꤥ꤬ ꤙꤤꤒꤢꤩ꤭ꤒꤢꤩ꤭꤮ ꤙꤢꤧ꤬ꤙꤢꤧ꤬, ꤜꤟꤢꤩꤗꤟꤢꤩ꤬ ꤢꤧꤜꤣ ꤕꤟꤥ ꤒꤟꤢꤧ꤬ꤗꤟꤢꤩ꤬ ꤔꤢ Paratext project ꤢ꤬ꤑꤢꤩ꤭ ꤒꤟꤢ꤭ꤤ꤭ꤒꤟꤢꤧ꤬ ꤒꤢ꤬ꤟꤢꤩ꤬꤯</value>
  </data>
  <data name="EngageChecking" xml:space="preserve">
    <value>ꤗꤟꤢꤩ꤬ ꤒꤟꤢꤧ꤬ꤓꤢꤦꤡꤢꤩ꤭ ꤔꤢ ꤊꤢ꤬ꤛꤢ꤭ ꤢꤧꤕꤚꤟꤢꤧ꤬</value>
  </data>
  <data name="EngageCollaborate" xml:space="preserve">
    <value>ꤗꤟꤢꤩ꤬ꤚꤟꤥꤜꤢꤨ꤭ꤒꤟꤢꤧ꤬ ꤘꤣ ꤜꤤ꤬ꤡꤢ꤭ꤏꤢꤧ꤭ ꤢ꤬ꤑꤢꤩ꤭</value>
  </data>
  <data name="EngageSuggestions" xml:space="preserve">
    <value>ꤙꤤ ꤔꤟꤢꤧ꤬ꤗꤟꤢꤦ꤭ ꤜꤤ꤬ꤕꤜꤢꤪ꤬ ꤢ꤬ꤋꤢꤧ꤭ꤔꤌꤣ꤬ ꤖꤛꤢꤩꤔꤟꤤ ꤒꤟꤢꤧ꤬ꤘꤛꤢꤩꤞꤢꤧꤑꤢꤩ꤭ꤡꤝꤟꤥ</value>
  </data>
  <data name="EngageTitle" xml:space="preserve">
    <value>ꤗꤟꤢꤩ꤬ꤒꤟꤌꤣꤊꤟꤌꤣ꤭ ꤒꤟꤢꤧ꤬ ꤔꤢ ꤜꤟꤢ꤭ꤍꤟꤥ ꤊꤢ꤬ꤛꤢ꤭ꤕꤜꤢꤪꤗꤟꤢꤨ꤬ ꤒꤢ꤬ꤟꤢꤩ꤬꤯ ꤗꤟꤢꤩ꤬ꤚꤟꤥꤜꤢꤨ꤭ ꤒꤟꤢꤧ꤬ ꤔꤢ ꤊꤢ꤬ꤛꤢ꤭ꤞꤛꤢꤔꤢ ꤔꤟꤢꤧ꤬ ꤒꤢ꤬ꤟꤢꤩ꤬꤯</value>
  </data>
</root>
