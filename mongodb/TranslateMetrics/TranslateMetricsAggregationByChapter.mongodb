// MongoDB Playground
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Aggregates the translate metrics for the given project, book and chapter.
// Check in the VSCode Output panel to confirm the correct project and book.

const path = require('path');
const { Canon } = require(path.resolve('./src/RealtimeServer/lib/cjs/scriptureforge/scripture-utils/canon.js'));

// Select the database to use.
use('xforge');

const projectRef = '60e57ea17e9c4e37643a57de';
const bookId = 'LUK';

const bookNum = Canon.bookIdToNumber(bookId);
const project = db.sf_projects.findOne({ _id: projectRef });
console.log(`project: ${project.shortName} - ${project.name}`);
console.log('book: ' + Canon.bookNumberToEnglishName(bookNum));

db.translate_metrics.aggregate([
  { $match: { projectRef, bookNum } },
  { $group: {
    _id: '$segment',
    maxSourceWordCount: { $max: '$sourceWordCount' },
    maxTargetWordCount: { $max: '$targetWordCount' },
    agKeyBackspaceCount: { $sum: '$keyBackspaceCount' },
    agKeyDeleteCount: { $sum: '$keyDeleteCount' },
    agKeyCharacterCount: { $sum: '$keyCharacterCount' },
    agProductiveCharacterCount: { $sum: '$productiveCharacterCount' },
    agSuggestionAcceptedCount: { $sum: '$suggestionAcceptedCount' },
    agSuggestionTotalCount: { $sum: '$suggestionTotalCount' },
    agTimeEditActive: { $sum: '$timeEditActive' },
    agKeyNavigationCount: { $sum: '$keyNavigationCount' },
    agMouseClickCount: { $sum: '$mouseClickCount' },
  } },
  { $sort: { _id: 1 } }
]);
