name: E2E Tests
permissions: {}

on:
  # push:
  #   branches: [develop, master, sf-qa, sf-live]
  pull_request:
  workflow_dispatch:

jobs:
  e2e_tests:
    name: "E2E Tests"
    environment: "e2e_tests"
    strategy:
      matrix:
        os: ["ubuntu-22.04"]
        dotnet_version: ["8.0.x"]
        node_version: ["22.13.0"]
        npm_version: ["10.9.2"]
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "Deps: .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{matrix.dotnet_version}}
          cache: true
          cache-dependency-path: src/SIL.XForge.Scripture/packages.lock.json
      - name: "Deps: Node"
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.node_version}}
          cache: "npm"
          cache-dependency-path: |
            src/SIL.XForge.Scripture/ClientApp/package-lock.json
            src/RealtimeServer/package-lock.json
      - name: "Deps: npm"
        env:
          NPM_VERSION: ${{matrix.npm_version}}
        run: |
          set -xueo pipefail
          npm install --global npm@${NPM_VERSION}
      - name: Pre-build report
        run: |
          set -xueo pipefail
          lsb_release -a
          which dotnet
          dotnet --version
          dpkg -l dotnet\*
          dotnet --list-sdks
          dotnet --list-runtimes
          which node
          node --version
          which npm
          npm --version
          which chromium-browser
          chromium-browser --version
      - name: "Ensure desired tool versions"
        # The build machine may come with newer tools than we are ready for.
        env:
          NODE_VERSION: ${{matrix.node_version}}
          NPM_VERSION: ${{matrix.npm_version}}
        run: |
          set -xueo pipefail
          [[ $(node --version) == v${NODE_VERSION} ]]
          [[ $(npm --version) == ${NPM_VERSION} ]]

      - name: "Deps: RealtimeServer npm"
        run: cd src/RealtimeServer && (npm ci || (sleep 3m && npm ci))
      - name: "Deps: Backend nuget"
        run: dotnet restore
      - name: "Deps: Frontend npm"
        run: cd src/SIL.XForge.Scripture/ClientApp && (npm ci || (sleep 3m && npm ci))

      - name: "Build: Backend, RealtimeServer"
        run: dotnet build xForge.sln
      - name: "Build: Frontend"
        run: cd src/SIL.XForge.Scripture/ClientApp && npm run build

      # - name: "Install MongoDB"
      #   run: |
      #     set -xueo pipefail

      #     # Add repository key
      #     sudo curl --silent --fail --show-error --location \
      #       https://www.mongodb.org/static/pgp/server-8.0.asc \
      #       --output /usr/share/keyrings/mongodb-server-8.0.asc
      #     sha512sum /usr/share/keyrings/mongodb-server-8.0.asc

      #     # Add repository
      #     {
      #     sudo tee >/dev/null /etc/apt/sources.list.d/mongodb-org.sources <<END
      #     Enabled: yes
      #     Types: deb
      #     URIs: https://repo.mongodb.org/apt/ubuntu
      #     Suites: $(source /etc/os-release && echo ${VERSION_CODENAME})/mongodb-org/8.0
      #     Components: multiverse
      #     Architectures: amd64
      #     Signed-By: /usr/share/keyrings/mongodb-server-8.0.asc
      #     END
      #     }

      #     # Install and run MongoDB
      #     sudo apt-get update
      #     sudo apt-get --assume-yes install mongodb-org
      #     sudo systemctl start mongod.service

      - name: "SF deps"
        run: |
          set -xueo pipefail
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt-get install --assume-yes ansible
          cd deploy
          ansible-playbook dev-server.playbook.yml --limit localhost --diff

      - name: "Configure secrets"
        env:
          PARATEXT_CLIENT_ID: ${{ secrets.PARATEXT_CLIENT_ID }}
          PARATEXT_CLIENT_SECRET: ${{ secrets.PARATEXT_CLIENT_SECRET }}
          AUTH0_BACKEND_CLIENT_SECRET: ${{ secrets.AUTH0_BACKEND_CLIENT_SECRET }}
          PARATEXT_RESOURCE_PASSWORD_HASH: ${{ secrets.PARATEXT_RESOURCE_PASSWORD_HASH }}
          PARATEXT_RESOURCE_PASSWORD_BASE64: ${{ secrets.PARATEXT_RESOURCE_PASSWORD_BASE64 }}
          SERVAL_CLIENT_ID: ${{ secrets.SERVAL_CLIENT_ID }}
          SERVAL_CLIENT_SECRET: ${{ secrets.SERVAL_CLIENT_SECRET }}
          E2E_SECRETS_JSON_BASE64: ${{ secrets.E2E_SECRETS_JSON_BASE64 }}
        run: |
          set -xueo pipefail
          cd src/SIL.XForge.Scripture/
          dotnet user-secrets set "Paratext:ClientId" "${PARATEXT_CLIENT_ID}"
          dotnet user-secrets set "Paratext:ClientSecret" "${PARATEXT_CLIENT_SECRET}"
          dotnet user-secrets set "Auth:BackendClientSecret" "${AUTH0_BACKEND_CLIENT_SECRET}"
          dotnet user-secrets set "Paratext:ResourcePasswordHash" "${PARATEXT_RESOURCE_PASSWORD_HASH}"
          dotnet user-secrets set "Paratext:ResourcePasswordBase64" "${PARATEXT_RESOURCE_PASSWORD_BASE64}"
          dotnet user-secrets set "Serval:ClientId" "${SERVAL_CLIENT_ID}"
          dotnet user-secrets set "Serval:ClientSecret" "${SERVAL_CLIENT_SECRET}",
          base64 --decode - <<< "${E2E_SECRETS_JSON_BASE64}" > ./ClientApp/e2e/secrets.json

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Playwright install browsers
        run: |
          set -xueo pipefail
          cd src/SIL.XForge.Scripture/ClientApp/e2e
          sudo npx playwright install-deps
          npx playwright install

      - name: Run E2E tests
        run: ./src/SIL.XForge.Scripture/ClientApp/e2e/pre_merge_ci.sh
