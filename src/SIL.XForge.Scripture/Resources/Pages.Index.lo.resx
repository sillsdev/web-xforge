<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutCheckingTool" xml:space="preserve">
    <value>Our Community Checking tool facilitates modular Scripture checking campaigns, to deliver broader feedback to the translation committee, faster.</value>
  </data>
  <data name="AboutEngaging" xml:space="preserve">
    <value>Scripture projects engage increasingly geographically diverse groups of heart language speakers.</value>
  </data>
  <data name="AboutFlexible" xml:space="preserve">
    <value>Flexible</value>
  </data>
  <data name="AboutFlexibleDescription" xml:space="preserve">
    <value>2 Compile {0}unique questions{1} that fit your specific context.</value>
  </data>
  <data name="AboutHeader" xml:space="preserve">
    <value>About Scripture Forge</value>
  </data>
  <data name="AboutParatext" xml:space="preserve">
    <value>Works with Paratext</value>
  </data>
  <data name="AboutParatextDescription" xml:space="preserve">
    <value>1 {2}Paratext integration{3} and {0}ongoing synchronization{1} keeps your project up-to-date and allows user feedback via {4}Paratext Notes{3}.</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>Extend your Reach With Scripture Checking</value>
  </data>
  <data name="AboutUserEngagement" xml:space="preserve">
    <value>User Engagement</value>
  </data>
  <data name="AboutUserEngagementDescription" xml:space="preserve">
    <value>3 {0}Invited users{1} can answer questions, leave comments on existing answers and like responses.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>A free set of tools to do more with your Paratext project, wherever you are. </value>
  </data>
  <data name="EngageChecking" xml:space="preserve">
    <value>Engage in Community Checking</value>
  </data>
  <data name="EngageCollaborate" xml:space="preserve">
    <value>Collaborate on Scripture</value>
  </data>
  <data name="EngageSuggestions" xml:space="preserve">
    <value>Get suggestions as you type</value>
  </data>
  <data name="EngageTitle" xml:space="preserve">
    <value>Engage with the language community. Collaborate with your peers.</value>
  </data>
  <data name="QuoteQuotation1" xml:space="preserve">
    <value>It was so easy! ...all I had to do to get started was log in using my Paratext registration and boom! It was all there.</value>
  </data>
  <data name="QuoteQuotation2" xml:space="preserve">
    <value>Right away I chose a verse and wrote a checking question for it. Then I also recorded myself asking that checking question.</value>
  </data>
  <data name="QuoteQuotation3" xml:space="preserve">
    <value>Itâ€™s so great that feedback can be gathered either way. All the features are wonderful for remote contributors, including the option to answer the questions with an audio recording.</value>
  </data>
  <data name="QuoteQuoterName" xml:space="preserve">
    <value>Trevor Deck</value>
  </data>
  <data name="QuoteQuoterRole" xml:space="preserve">
    <value>SIL Global Diaspora Specialist</value>
  </data>
  <data name="Statement" xml:space="preserve">
    <value>Where translation and the community meet.</value>
  </data>
</root>
