@use '@angular/material' as mat;
@use 'src/_variables' as variables;

@mixin color($theme) {
  $is-dark: mat.get-theme-type($theme) == dark;

  --mdc-elevated-card-container-color: #{mat.get-theme-color($theme, neutral, if($is-dark, 20, 98))};

  .active-project {
    background-color: #{mat.get-theme-color($theme, primary, if($is-dark, 20, 90))};
  }
  .pt-content-container {
    background-color: #{mat.get-theme-color($theme, neutral, if($is-dark, 20, 98))};
    .user-unconnected-project:nth-child(even) {
      background-color: #{mat.get-theme-color($theme, neutral, if($is-dark, 30, 90))};
    }
  }
  .loading-card > * {
    background-color: #{mat.get-theme-color($theme, neutral, if($is-dark, 30, 90))};
  }
  // TODO: Investigate formal way to implement info type cards a button colors that aren't part of the theme palette
  .user-update-project {
    background-color: #{if($is-dark, darken(variables.$info-color, 30%), lighten(variables.$info-color, 40%))};
  }
  .user-update-project-btn:not(:disabled) {
    --mdc-filled-button-label-text-color: #{mat.get-theme-color($theme, primary, 100)};
    --mdc-filled-button-container-color: #{variables.$info-color};
    &:hover {
      --mdc-filled-button-container-color: #{darken(variables.$info-color, 10%)};
    }
  }
}

@mixin theme($theme) {
  @if mat.theme-has($theme, color) {
    @include color($theme);
  }
}
