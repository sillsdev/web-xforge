use('xforge');

const minAnswers = 10;

db.questions.aggregate([
  // find questions that have the answers property
  {$match: {
    answers: { $exists: true }
  }},
  // strip out all unneeded field and count up the properties of interest
  {$project: {
    answers: { $size: '$answers' },
    audioAnswers: {
      $size: {
        $filter: {
          input: '$answers',
          as: 'answer',
          cond: { $ifNull: ['$$answer.audioUrl', false] }
        }
      }
    },
    // set hasAudio to 1 or 0, so that we can count questions with audio in the next step by summing this value
    hasAudio: { $cond: { if: '$audioUrl', then: 1, else: 0 } },
    projectRef: 1
  }},
  // group the questions by projectRef, and sum the values of interest
  {$group: {
    _id: '$projectRef',
    questions: { $sum: 1 },
    audioQuestions: { $sum: '$hasAudio' },
    answers: { $sum: '$answers' },
    audioAnswers: { $sum: '$audioAnswers' }
  }},
  // filter out any projects that have fewer than minAnswers
  {$match: {
    answers: { $gte: minAnswers }
  }},
  // sort by the number of answers, descending
  {$sort: {
    answers: -1
  }},
  // lookup the project associated with the project id, and add it as a property
  {$lookup: {
    from: 'sf_projects',
    localField: '_id',
    foreignField: '_id',
    as: 'project'
  }},
  // $lookup adds an array of projects with one result; change from an array to a single property
  {$unwind: {
    path: '$project'
  }},
  // only keep the values we're looking for
  {$project: {
    shortName: '$project.shortName',
    name: '$project.name',
    questions: 1,
    audioQuestions: 1,
    answers: 1,
    audioAnswers: 1
  }}
]);
