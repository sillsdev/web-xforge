# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  config.vm.box = "NathanielPaulus/xenial64-xforge"

  config.vm.hostname = "vag-u1604-xf"

  config.vm.provider "virtualbox" do |vb|
    vb.name="vag-u1604-xf"
    vb.gui = true
    vb.cpus = 4
    # At least 3 GiB of RAM is needed to run tests.
    vb.memory = "4096"
  end

  config.vm.provision "shell", privileged: false, inline: <<~SHELL
    set -eux -o pipefail

    function tryharderto() { i=0; until "$@"; do ((++i > 3)) && false; echo >&2 Retrying $i; sleep 2m; done }

    # Canary
    tee ~/Desktop/development-tools/warning-not-provisioned.txt <<END
    The presence of this file means that the vagrant virtual machine did not
    finish provisioning correctly.
    The best way to get to a working machine state is to backup any data that
    you want to keep from this virtual machine, and then destroy and re-create
    this vagrant virtual machine by running these commands from your host:
        vagrant destroy
        vagrant up
    END

    # Delete and generate unique host keys until handled by base box.
    sudo rm -v /etc/ssh/ssh_host_*
    sudo dpkg-reconfigure openssh-server

    git config --global user.email "#{`git config --get user.email`.strip}"
    git config --global user.name "#{`git config --get user.name`.strip}"

    cd ~/src/web-xforge
    git checkout -- package-lock.json
    git pull --ff-only --recurse-submodules

    cd ~/src/web-xforge/deploy
    tryharderto ansible-playbook playbook_xenial.yml --limit localhost -K
    sudo npm install -g npm@6.4.1

    sudo npm install -g @angular/cli@7.3.8

    # These permission fixes need done in the ansible that is reverting them.
    sudo chown -R $USER:$USER ~/src/web-xforge/src/assets
    sudo chmod g+s ~/src/web-xforge/src/assets

    # Until baked into base box:

    # Let VS Code watch lots of files.
    sudo tee -a /etc/sysctl.conf >/dev/null <<< 'fs.inotify.max_user_watches=524288'
    sudo sysctl -p # Only needed if we want to use the change before rebooting.

    cp -aL /usr/share/applications/chromium-browser.desktop ~/Desktop/development-tools/
    chmod +x ~/Desktop/development-tools/chromium-browser.desktop

    tee ~/Desktop/development-tools/dev-readme.txt >/dev/null <<END
    xForge Development Machine

    Your git user and email should have been set from your host machine.

    See the xForge Project Workflow gdoc for setting developer secrets,
    Paratext account setup, enabling multiple monitors in VirtualBox, etc.

    You may find it helpful to increase the amount of RAM your virtual machine
    is given, by increasing 'vb.memory' in 'Vagrantfile', then running
    'vagrant halt && vagrant up' from your host.

    You may also find it helpful to enable 3D and increase video RAM by doing
    the following. This can allow larger display resolutions, and might ease
    Unity/Compiz CPU usage. Shut down the virtual machine. Open its Settings
    in VirtualBox Manager. In the Display area, set Video Memory to 64 MB and
    select Enable 3D Acceleration.
    END

    tryharderto sudo apt-get install -y paratext-8.0
    cp -aL /usr/share/applications/paratext8.desktop ~/Desktop/development-tools/
    chmod +x ~/Desktop/development-tools/paratext8.desktop

    # Remove canary
    rm ~/Desktop/development-tools/warning-not-provisioned.txt
    echo Provisioning finished successfully.
  SHELL
end
