use('xforge')

// Taken from https://github.com/sillsdev/scripture/blob/main/src/canon.ts
const bookIds = [
  'GEN',
  'EXO',
  'LEV',
  'NUM',
  'DEU',
  'JOS',
  'JDG',
  'RUT',
  '1SA',
  '2SA', // 10

  '1KI',
  '2KI',
  '1CH',
  '2CH',
  'EZR',
  'NEH',
  'EST',
  'JOB',
  'PSA',
  'PRO', // 20

  'ECC',
  'SNG',
  'ISA',
  'JER',
  'LAM',
  'EZK',
  'DAN',
  'HOS',
  'JOL',
  'AMO', // 30

  'OBA',
  'JON',
  'MIC',
  'NAM',
  'HAB',
  'ZEP',
  'HAG',
  'ZEC',
  'MAL',
  'MAT', // 40

  'MRK',
  'LUK',
  'JHN',
  'ACT',
  'ROM',
  '1CO',
  '2CO',
  'GAL',
  'EPH',
  'PHP', // 50

  'COL',
  '1TH',
  '2TH',
  '1TI',
  '2TI',
  'TIT',
  'PHM',
  'HEB',
  'JAS',
  '1PE', // 60

  '2PE',
  '1JN',
  '2JN',
  '3JN',
  'JUD',
  'REV'
];

const metrics = db.event_metrics.find({ eventType: 'StartPreTranslationBuildAsync' }).toArray();

const draftedBooksByProject = {};

for (const metric of metrics) {
  // Handle old payload format
  let books = metric.payload.buildConfig.TranslationScriptureRange;

  // Handle new payload format
  if (books == null) {
    if (metric.payload.buildConfig.TranslationScriptureRanges.length > 1) {
      throw new Error('Script is not designed to handle multiple ranges of translated books.')
    }
    books = metric.payload.buildConfig.TranslationScriptureRanges[0].ScriptureRange;
  }

  books = books.split(';');

  draftedBooksByProject[metric.projectId] ??= new Set();

  for (const book of books) {
    draftedBooksByProject[metric.projectId].add(book);
  }
}

const projects = db.sf_projects.find({
  _id: { $in: Object.keys(draftedBooksByProject) }
}, {
  name: 1,
  shortName: 1,
  writingSystem: 1,
  paratextId: 1
}).toArray();

console.log('Project ID\tParatext ID\tWriting System\tShort Name\tProject Name\tJobs\tDrafted Books Count\tDrafted Books');
for (const [projectId, books] of Object.entries(draftedBooksByProject)) {

  const project = projects.find(p => p._id === projectId);
  if (!project) {
    console.warn(`Project ${projectId} not found in sf_projects collection.`);
    continue;
  }
  const jobCount = metrics.filter(m => m.projectId === projectId).length;

  console.log(`${projectId}\t${project.paratextId}\t${project.writingSystem.tag}\t${project.shortName}\t${project.name}\t${jobCount}\t${books.size}\t${Array.from(books).sort().join(', ')}`);
}

console.log('\nBook\tProjects drafting');
for (const bookId of bookIds) {
  let count = 0;
  for (const books of Object.values(draftedBooksByProject)) {
    if (books.has(bookId)) {
      count++;
    }
  }
  console.log(`${bookId}\t${count}`);
}
