// MongoDB Playground
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Aggregates the translate metrics for the given project and book.
// Check in the VSCode Output panel to confirm the correct project and book.
const projectRef = '';
const bookId = '';

use('xforge');

const path = require('path');
const { Canon } = require(path.resolve('./src/RealtimeServer/lib/cjs/scriptureforge/scripture-utils/canon.js'));

const bookNum = Canon.bookIdToNumber(bookId);
const project = db.sf_projects.findOne({ _id: projectRef });
console.log(`project: ${project.shortName} - ${project.name}`);
console.log(`book: ${Canon.bookNumberToEnglishName(bookNum)} (${bookNum})`);

const results = db.translate_metrics.aggregate([
  { $match: { projectRef, bookNum } },
  { $group: {
    _id: { segment: '$segment', chapterNum: '$chapterNum' },
    maxSourceWordCount: { $max: '$sourceWordCount' },
    maxTargetWordCount: { $max: '$targetWordCount' },
    sumKeyBackspaceCount: { $sum: '$keyBackspaceCount' },
    sumKeyDeleteCount: { $sum: '$keyDeleteCount' },
    sumKeyCharacterCount: { $sum: '$keyCharacterCount' },
    sumProductiveCharacterCount: { $sum: '$productiveCharacterCount' },
    sumSuggestionAcceptedCount: { $sum: '$suggestionAcceptedCount' },
    sumSuggestionTotalCount: { $sum: '$suggestionTotalCount' },
    sumTimeEditActive: { $sum: '$timeEditActive' },
    sumKeyNavigationCount: { $sum: '$keyNavigationCount' },
    sumMouseClickCount: { $sum: '$mouseClickCount' },
  } },
  { $group: {
    _id: '$_id.chapterNum',
    amSourceWordCount: { $sum: '$maxSourceWordCount' },
    amTargetWordCount: { $sum: '$maxTargetWordCount' },
    agKeyBackspaceCount: { $sum: '$sumKeyBackspaceCount' },
    agKeyDeleteCount: { $sum: '$sumKeyDeleteCount' },
    agKeyCharacterCount: { $sum: '$sumKeyCharacterCount' },
    agProductiveCharacterCount: { $sum: '$sumProductiveCharacterCount' },
    agSuggestionAcceptedCount: { $sum: '$sumSuggestionAcceptedCount' },
    agSuggestionTotalCount: { $sum: '$sumSuggestionTotalCount' },
    agTimeEditActive: { $sum: '$sumTimeEditActive' },
    agKeyNavigationCount: { $sum: '$sumKeyNavigationCount' },
    agMouseClickCount: { $sum: '$sumMouseClickCount' },
  } },
  { $sort: { _id: 1 } }
]).toArray();

console.log(
  'Chapter,' +
  'Source word count,' +
  'Target word count,' +
  'Backspace key,' +
  'Delete key,' +
  'Key characters,' +
  'Productive characters,' +
  'Accepted suggestions,' +
  'Total suggestions,' +
  'Time editing,' +
  'Key navigations,' +
  'Mouse clicks'
)
for (const result of results) {
  console.log(
    result._id + ',' +
    result.amSourceWordCount + ',' +
    result.amTargetWordCount + ',' +
    result.agKeyBackspaceCount + ',' +
    result.agKeyDeleteCount + ',' +
    result.agKeyCharacterCount + ',' +
    result.agProductiveCharacterCount + ',' +
    result.agSuggestionAcceptedCount + ',' +
    result.agSuggestionTotalCount + ',' +
    result.agTimeEditActive + ',' +
    result.agKeyNavigationCount + ',' +
    result.agMouseClickCount
  );
}
