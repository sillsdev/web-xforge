name: "Release"
permissions: {}

on:
  workflow_call:
    inputs:
      environment:
        description: "The GitHub environment to deploy to."
        required: true
        type: string
      build_commit:
        description: "The VCS commit from which to deploy."
        required: true
        type: string
      release_branch:
        description: "The branch that will be made to point to the released commit after deploying."
        required: true
        type: string

      # Build environment
      dotnet_version:
        description: "The version of .NET to use when building."
        type: string
        required: true
      node_version:
        description: "The version of Node.js to use when building."
        type: string
        required: true
      npm_version:
        description: "The version of npm to use when building."
        type: string
        required: true
      os:
        description: "The operating system to use when building."
        type: string
        required: true

      # Build configuration
      angular_config:
        description: "The Angular configuration to use for deployment."
        type: string
        required: true
      app_name:
        description: "The name of the application to deploy."
        type: string
        required: true
      app_suffix:
        description: "The suffix to use for the application."
        type: string
        required: true
      version_number:
        description: "The version number to use for the deployment."
        type: string
        required: true
      node_options:
        description: "Node-related options when building RealtimeServer."
        type: string
        required: true
      project:
        description: "The project to deploy."
        type: string
        required: true
      vcs_tag_prefix:
        description: "The prefix to use for the VCS tag."
        type: string
        required: true
      server_domain_name:
        description: "The domain name that will be hosting the application."
        type: string
        required: true

jobs:
  deploy:
    name: "Deploy"
    environment: "${{inputs.environment}}"
    runs-on: ${{inputs.os}}
    steps:
      - name: Place SSH deploy credentials
        env:
          SECRETS_DEPLOY_KNOWN_HOSTS: ${{secrets.deploy_known_hosts}}
          SECRETS_DEPLOY_SSH_PRIVATE_KEY: ${{secrets.deploy_ssh_private_key}}
        run: |
          set -xueo pipefail
          install --mode=700 --directory ~/.ssh
          install --mode=600 /dev/stdin ~/.ssh/known_hosts <<< "${SECRETS_DEPLOY_KNOWN_HOSTS}"
          install --mode=600 /dev/stdin ~/.ssh/deploy_key <<< "${SECRETS_DEPLOY_SSH_PRIVATE_KEY}"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{inputs.build_commit}}
          fetch-depth: "0"
      - name: "Deps: .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{inputs.dotnet_version}}
          cache: true
          cache-dependency-path: src/SIL.XForge.Scripture/package.lock.json
      - name: "Deps: Node"
        uses: actions/setup-node@v4
        with:
          node-version: ${{inputs.node_version}}
          cache: "npm"
          cache-dependency-path: |
            src/SIL.XForge.Scripture/ClientApp/package-lock.json
            src/RealtimeServer/package-lock.json
      - name: "Deps: npm"
        env:
          NPM_VERSION: ${{inputs.npm_version}}
        run: |
          set -xueo pipefail
          npm install --global npm@${NPM_VERSION}
      - name: Pre-build report
        run: |
          set -xueo pipefail
          lsb_release -a
          which dotnet
          dotnet --version
          dpkg -l dotnet\*
          dotnet --list-sdks
          dotnet --list-runtimes
          which node
          node --version
          which npm
          npm --version
      - name: "Ensure desired tool versions"
        env:
          NODE_VERSION: ${{inputs.node_version}}
          NPM_VERSION: ${{inputs.npm_version}}
        run: |
          set -xueo pipefail
          [[ $(node --version) == v${NODE_VERSION} ]]
          [[ $(npm --version) == ${NPM_VERSION} ]]
      - name: "Deps: rsync"
        run: sudo apt-get install rsync
      - name: "Build and ship"
        run: scripts/build-and-ship
        env:
          ANGULAR_CONFIG: ${{inputs.angular_config}}
          APP_NAME: ${{inputs.app_name}}
          APP_SUFFIX: ${{inputs.app_suffix}}
          BUILD_NUMBER: ${{inputs.version_number}}
          DEPLOY_DESTINATION: ${{secrets.deploy_server}}
          DEPLOY_CREDENTIALS: ~/.ssh/deploy_key
          HOSTNAME: ${{inputs.server_domain_name}}
          ALTERNATE_DOMAIN: ${{secrets.alternate_domain}}
          NODE_OPTIONS: ${{inputs.node_options}}
          PARATEXT_CLIENT_ID: ${{secrets.paratext_client_id}}
          PROJECT: ${{inputs.project}}
          SERVAL_CLIENT_ID: ${{secrets.serval_client_id}}
          AUTH_BACKEND_SECRET: ${{secrets.auth_backend_secret}}
          AUTH_WEBHOOK_PASSWORD: ${{secrets.auth_webhook_password}}
          AUTH_HEALTH_CHECK_API_KEY: ${{secrets.auth_health_check_api_key}}
          PARATEXT_API_TOKEN: ${{secrets.paratext_api_token}}
          PARATEXT_RESOURCE_PASSWORD_BASE64: ${{secrets.paratext_resource_password_base64}}
          PARATEXT_RESOURCE_PASSWORD_HASH: ${{secrets.paratext_resource_password_hash}}
          SERVAL_CLIENT_SECRET: ${{secrets.serval_client_secret}}
          SERVAL_WEBHOOK_SECRET: ${{secrets.serval_webhook_secret}}
      - name: Update release branch
        env:
          BUILD_COMMIT: ${{inputs.build_commit}}
          RELEASE_BRANCH: ${{inputs.release_branch}}
        run: |
          set -xueo pipefail
          git push --force origin ${BUILD_COMMIT}:${RELEASE_BRANCH}
      - name: "Tag release"
        env:
          VCS_TAG_PREFIX: ${{inputs.vcs_tag_prefix}}
          VERSION_NUMBER: ${{inputs.version_number}}
        run: |
          set -xueo pipefail
          git config --global user.name "ci"
          git config --global user.email "ci"
          tag="${VCS_TAG_PREFIX}${VERSION_NUMBER}"
          git tag --annotate --message "Release ${tag}" "${tag}"
          git push origin "${tag}"
