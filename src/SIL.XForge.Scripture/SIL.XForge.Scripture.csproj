<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <UserSecretsId>4d0606c3-0fc7-4d76-b43b-236485004e81</UserSecretsId>
    <MachineVersion>2.4.4</MachineVersion>
    <RealtimeServerRoot>..\RealtimeServer\</RealtimeServerRoot>
    <AngularConfig>production</AngularConfig>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.1.2" />
    <!-- When using a new major or minor version of ParatextData, update where dependencies.yml copies the
         InternetSettings.xml file. Also update server config scriptureforge.org_v2.yml. -->
    <PackageReference Include="ParatextData" Version="9.2.6.2" />
    <PackageReference Include="SIL.Machine.WebApi" Version="$(MachineVersion)" />
    <PackageReference Include="System.Text.Encoding.CodePages" Version="4.7.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\SIL.XForge\SIL.XForge.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="$(NuGetPackageRoot)sil.machine.webapi\$(MachineVersion)\contentFiles\any\netcoreapp3.1\thot-new-model.zip">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources\SharedResource.en.resx">
      <Generator></Generator>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <None Update="usx-sf.xsd">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="usfm.sty">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="usfm_mod.sty">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="changedChapter.py">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="ParatextMerge.py">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="revisionTemplate.tem">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="revisionStyle.sty">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="EnsureNodeInstalled">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
  </Target>

  <Target Name="DebugEnsureNodeEnv" DependsOnTargets="EnsureNodeInstalled" BeforeTargets="Build" Condition="('$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules')) Or '$(NpmInstall)' == 'true'">
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="BuildRealtimeServer" DependsOnTargets="EnsureNodeInstalled" BeforeTargets="AssignTargetPaths" Condition="'$(Configuration)' == 'Debug'">
    <Message Importance="high" Text="Building real-time server..." />
    <Exec WorkingDirectory="$(RealtimeServerRoot)" Command="npm install" Condition="!Exists('$(RealtimeServerRoot)node_modules') Or '$(NpmInstall)' == 'true'" />
    <Exec WorkingDirectory="$(RealtimeServerRoot)" Command="npm run build" Condition="Exists('$(RealtimeServerRoot)node_modules') And '$(NpmInstall)' != 'true' " />
    <ItemGroup>
      <RealtimeFiles Include="$(RealtimeServerRoot)**\*" />
      <Content Include="@(RealtimeFiles)">
        <Link>RealtimeServer\%(RecursiveDir)%(Filename)%(Extension)</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </Content>
    </ItemGroup>
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(RealtimeServerRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --configuration=$(AngularConfig)" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --configuration=$(AngularConfig)" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
      <RealtimeFiles Include="$(RealtimeServerRoot)**\*" />
      <ResolvedFileToPublish Include="@(RealtimeFiles)" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>RealtimeServer\%(RecursiveDir)%(Filename)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <Target Name="AssignCustomCultures" AfterTargets="SplitResourcesByCulture">
    <!--
      Manually set culture metadata on embedded resources in order to support localization resources with custom
      cultures. See MSBuild bug https://github.com/microsoft/msbuild/issues/1454 for more info.
    -->
    <ItemGroup>
      <EmbeddedResource Condition="$([System.IO.Path]::HasExtension(%(Filename))) And $([System.IO.Path]::GetFileNameWithoutExtension(%(Filename))) != 'Pages'">
        <Culture>$([System.IO.Path]::GetExtension(%(Filename)).TrimStart('.'))</Culture>
        <WithCulture>true</WithCulture>
        <ManifestResourceName>SIL.XForge.Scripture.Resources.%(Filename)</ManifestResourceName>
      </EmbeddedResource>
    </ItemGroup>
    <ItemGroup>
      <ResxWithNoCulture Remove="@(ResxWithNoCulture)"/>
      <NonResxWithNoCulture Remove="@(NonResxWithNoCulture)"/>
      <ResxWithCulture Remove="@(ResxWithCulture)"/>
      <NonResxWithCulture Remove="@(NonResxWithCulture)"/>
      <ResxWithNoCulture Include="@(EmbeddedResource)" Condition="'%(WithCulture)'=='false' and ('%(Extension)'=='.resx' or '%(Extension)'=='.restext')"/>
      <NonResxWithNoCulture Include="@(EmbeddedResource)" Condition="'%(WithCulture)'=='false' and ('%(Extension)'!='.resx' and '%(Extension)'!='.restext')"/>
      <ResxWithCulture Include="@(EmbeddedResource)" Condition="'%(WithCulture)'=='true' and ('%(Extension)'=='.resx' or '%(Extension)'=='.restext')"/>
      <NonResxWithCulture Include="@(EmbeddedResource)" Condition="'%(WithCulture)'=='true' and ('%(Extension)'!='.resx' and '%(Extension)'!='.restext')"/>
    </ItemGroup>
  </Target>
</Project>
