# Releases from master branch to QA staging server.
name: "Release to QA"
permissions: {}

concurrency: deploy-staging

on:
  schedule:
    # Run every day except Tuesday, at 01:30 UTC, shortly before beginning of tester workday.
    # Note that this workflow can be disabled from the GitHub UI by going to
    # Actions > Workflows > Release to QA > "..." > Disable workflow
    - cron: "30 1 * * 0-1,3-6"
  workflow_dispatch:
    inputs:
      skip-branch-update:
        description: "Skip updating the release branch, and just release the tip of the branch as it currently exists. This can be used to release a hotfix, provided you've already pushed it to the release branch."
        required: true
        type: boolean
        default: false
      re-release:
        description: "Build and release even if the build commit already has a release tag."
        required: true
        type: boolean
        default: false

jobs:
  determine_build_commit:
    name: "Determine commit from which to build"
    runs-on: ubuntu-22.04
    outputs:
      build_commit: "${{ steps.get_commit.outputs.build_commit }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: "0"
      - name: Use latest branch master
        if: ${{ github.event.inputs.skip-branch-update == 'false' }}
        run: git checkout master
      - name: Use existing branch sf-qa
        if: ${{ github.event.inputs.skip-branch-update == 'true' }}
        run: git checkout sf-qa
      - name: Get commit
        id: get_commit
        run: |
          set -xueo pipefail
          build_commit="$(git rev-parse HEAD)"
          echo "build_commit=${build_commit}" >> $GITHUB_OUTPUT
      - name: Details on selected build commit
        env:
          BUILD_COMMIT: ${{ steps.get_commit.outputs.build_commit }}
        run: |
          set -u
          build_commit="${BUILD_COMMIT}"
          echo "Using build_commit: ${build_commit}"
          echo " "
          echo "git describe: $(git describe "${build_commit}")"
          echo " "
          echo "Commit details:"
          git show --stat "${build_commit}"
          echo " "
          echo "Commit and ancestors:"
          git log --graph --decorate=short --oneline --abbrev=9 --max-count 5 "${build_commit}"
          echo " "
          echo "Commit in context of other branches:"
          build_commit_abbrev="${build_commit:0:9}"
          git log --graph --decorate=short --oneline --abbrev=9 --max-count 100 origin/sf-live origin/sf-qa origin/master | grep "${build_commit_abbrev}" --context=7 | perl -p -e "s/${build_commit_abbrev}/${build_commit_abbrev} <--/"

  stop_if_already_built:
    # Do not build again if the commit has already been built from and tagged.
    name: "Stop if already built"
    needs: determine_build_commit
    outputs:
      already_built: "${{ steps.check_if_already_built.outputs.already_built }}"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ needs.determine_build_commit.outputs.build_commit }}
          fetch-depth: "0"
      - name: Check if already built
        id: check_if_already_built
        env:
          BUILD_COMMIT: ${{ needs.determine_build_commit.outputs.build_commit }}
        run: |
          set -xueo pipefail
          TAGS=$(git tag --points-at "${BUILD_COMMIT}")
          PATTERN='^SF-QAv[0-9.]+$'
          # Does the current commit have any tags like this?
          MATCH=false
          for TAG in $TAGS; do
            if [[ $TAG =~ $PATTERN ]]; then
              MATCH=true
              break
            fi
          done
          echo "already_built=${MATCH}" >> $GITHUB_OUTPUT

  determine_version:
    name: "Determine version"
    needs: [determine_build_commit, stop_if_already_built]
    if: ${{ needs.stop_if_already_built.outputs.already_built == 'false' || github.event.inputs.re-release == 'true' }}
    uses: ./.github/workflows/compute-next-version.yml
    with:
      versioning-system: "staging"
      tag_prefix: "SF-QAv"
      release_branch: "sf-qa"

  deploy:
    name: "Deploy to QA"
    needs: [determine_build_commit, determine_version]
    secrets:
      deploy_known_hosts: ${{ secrets.deploy_known_hosts }}
      deploy_ssh_private_key: ${{ secrets.deploy_ssh_private_key }}
      deploy_server: ${{ secrets.deploy_server }}
      alternate_domain: ${{ secrets.alternate_domain }}
      paratext_client_id: ${{ secrets.paratext_client_id }}
      serval_client_id: ${{ secrets.serval_client_id }}
      auth_backend_secret: ${{ secrets.auth_backend_secret }}
      auth_webhook_password: ${{ secrets.auth_webhook_password }}
      auth_health_check_api_key: ${{ secrets.auth_health_check_api_key }}
      paratext_api_token: ${{ secrets.paratext_api_token }}
      paratext_resource_password_base64: ${{ secrets.paratext_resource_password_base64 }}
      paratext_resource_password_hash: ${{ secrets.paratext_resource_password_hash }}
      serval_client_secret: ${{ secrets.serval_client_secret }}
      serval_webhook_secret: ${{ secrets.serval_webhook_secret }}
    uses: ./.github/workflows/release.yml
    with:
      environment: "qa_deploy"
      build_commit: ${{ needs.determine_build_commit.outputs.build_commit }}
      release_branch: "sf-qa"

      dotnet_version: "8.0.x"
      node_version: "22.13.0"
      npm_version: "10.9.2"
      # When bumping OS version, the server will need to authorize the new default rsync args.
      os: "ubuntu-22.04"

      angular_config: "staging"
      app_name: "scriptureforge"
      app_suffix: "_qa"
      version_number: "${{ needs.determine_version.outputs.next_version }}"
      vcs_tag_prefix: "SF-QAv"
      node_options: "--max_old_space_size=4096"
      project: "SIL.XForge.Scripture"
      server_domain_name: "qa.scriptureforge.org"
